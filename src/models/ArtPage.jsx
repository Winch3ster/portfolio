import * as THREE from 'three'
import { useRef, useState } from 'react'
import { easing } from 'maath'
import { Canvas, useFrame } from '@react-three/fiber'
import {
  useGLTF,
  Center,
  Caustics,
  Environment,
  Lightformer,
  RandomizedLight,
  PerformanceMonitor,
  AccumulativeShadows,
  MeshTransmissionMaterial,
  OrbitControls,
  SpotLight,
  Stage
} from '@react-three/drei'

import model from '../assets/3d/portfolioArtPageModel.glb'
import Indicator from '../components/Indicator'



/*
      
        <OrbitControls></OrbitControls>
 <SpotLight castShadow penumbra={1} distance={6} angle={0.35} attenuation={5} anglePower={4} intensity={2}  color="#0c8cbf" position={[3, 3, 2]}/>

      

      <directionalLight position={[-5, 3, 3]}></directionalLight>

 <color attach="background" args={['#ff5500']} />

 <AccumulativeShadows frames={100} alphaTest={0.85} opacity={0.8} color="red" scale={20} position={[0, -0.005, 0]}>
          <RandomizedLight amount={8} radius={6} ambient={0.5} intensity={1} position={[-1.5, 2.5, -2.5]} bias={0.001} />
        </AccumulativeShadows>

Kit-bash auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.3 scene.glb --transform
Licenses: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Authors:
  matousekfoto (https://sketchfab.com/matousekfoto) (Fruit Cake Slice)
    https://sketchfab.com/3d-models/fruit-cake-slice-7b9a33386eab4dd986aa0980054ead3c
  Felix Yadomi (https://sketchfab.com/felixyadomi) (Cute milkshake)
    https://sketchfab.com/3d-models/cute-milkshake-3ba52a41b4b248df953684861d9e7a20
  Second Studio (https://sketchfab.com/kayaaku) (Dry flower)
    https://sketchfab.com/3d-models/dry-flower-ff0005d6eb4d4077bd08b8992299c45c
  CDcruz (https://sketchfab.com/cdcruz) (Ikea - Pokal Glass Cups)
    https://sketchfab.com/3d-models/ikea-pokal-glass-cups-21837e54a14346aa900e1ae719779b86
*/
const ArtScene = (props) =>  {
    const { nodes, materials } = useGLTF(model);

    function adjustIndicatorMarkToFitScreen(){
      let adjustToFitScreen = false;
      if(window.innerWidth < 768){
        adjustToFitScreen = true;
      }
  
      return adjustToFitScreen
    }

    let adjustToFitScreen = adjustIndicatorMarkToFitScreen()
    return (
      <group {...props} dispose={null} rotateOnAxis={[0, 30, 0]}>
        
        <mesh
          name="Cylinder"
          castShadow
          receiveShadow
          geometry={nodes.Cylinder.geometry}
          material={materials.baseColor}
          
        />
        <mesh
          name="Cylinder001"
          castShadow
          receiveShadow
        
          geometry={nodes.Cylinder001.geometry}
          material={materials.baseColor}
          
        />
         
        <mesh
          name="Cylinder002"
          castShadow
          receiveShadow
          geometry={nodes.Cylinder002.geometry}
          material={materials.baseColor}
        />
        
        <mesh
          name="neck"
          castShadow
          receiveShadow
          geometry={nodes.neck.geometry}
          material={materials["wood 2"]}
        />
        <group>
          <Indicator description={"Guitar"} page={1} scale={[0.5, 0.5, 0.5]} position={[-0.5, 2.3, -0.1]}></Indicator>
          <mesh
          name="freatboard"
          castShadow
          receiveShadow
          geometry={nodes.freatboard.geometry}
          material={materials["wood 2"]}
        />
        </group>
        
        <mesh
          name="frets_and_freatmarks"
          castShadow
          receiveShadow
          geometry={nodes.frets_and_freatmarks.geometry}
          material={materials.aluminium}
        />
        <mesh
          name="bridge"
          castShadow
          receiveShadow
          geometry={nodes.bridge.geometry}
          material={materials["wood 2"]}
        />
        <mesh
          name="rosette"
          castShadow
          receiveShadow
          geometry={nodes.rosette.geometry}
          material={materials.rosette}
        />
        <mesh
          name="bridge_pins_and_saddle"
          castShadow
          receiveShadow
          geometry={nodes.bridge_pins_and_saddle.geometry}
          material={materials.bone}
        />
        <mesh
          name="nut"
          castShadow
          receiveShadow
          geometry={nodes.nut.geometry}
          material={materials.bone}
        />

        <group>
        <Indicator description={"Miniatures"} page={2} scale={[0.5, 0.5, 0.5]} position={[-2, 3, 2]}></Indicator>
          <mesh
            name="GLman_level2"
            castShadow
            receiveShadow
            geometry={nodes.GLman_level2.geometry}
            material={materials.GLman}
          />
        </group>
        

        <group>
          <Indicator  positionFitScreen={adjustToFitScreen} description={"Digital Modelling"} page={3} position={[-2.2, 3.1, -1.6]}></Indicator>
          <mesh
            name="abstract_cube"
            castShadow
            receiveShadow
            geometry={nodes.abstract_cube.geometry}
            material={materials["Material.002"]}
          />
        </group>
        
        <mesh
          name="Plane001"
          castShadow
          receiveShadow
          geometry={nodes.Plane001.geometry}
          material={materials["wood 1"]}
        />
        <mesh
          name="Plane001_1"
          castShadow
          receiveShadow
          geometry={nodes.Plane001_1.geometry}
          material={materials["wood 2"]}
        />
        <mesh
          name="Plane001_2"
          castShadow
          receiveShadow
          geometry={nodes.Plane001_2.geometry}
          material={materials.rubber}
        />
        <mesh
          name="Plane021"
          castShadow
          receiveShadow
          geometry={nodes.Plane021.geometry}
          material={materials.aluminium}
        />
        <mesh
          name="Plane021_1"
          castShadow
          receiveShadow
          geometry={nodes.Plane021_1.geometry}
          material={materials.bone}
        />
        <mesh
          name="Plane030"
          castShadow
          receiveShadow
          geometry={nodes.Plane030.geometry}
          material={materials["fat strings"]}
        />
        <mesh
          name="Plane030_1"
          castShadow
          receiveShadow
          geometry={nodes.Plane030_1.geometry}
          material={materials["thin strings"]}
        />
      </group>
    );
}


export default ArtScene;

/**
 * 
 *  

<Stage castShadow shadows={'contact'} intensity={0} preset={'rembrandt'} >
          
    </Stage>
 *                     <Lightformer   intensity={1.5}  color="#f7c09e"  position={[-5, 3, 1]} scale={[10, 5, 1]} />

 *             <spotLight position={[3, 3, 2.3]} angle={10} penumbra={1} castShadow intensity={50} shadow-bias={-0.001} color={"#f7c09e"}/>

 * 
 * 
 * 
 */